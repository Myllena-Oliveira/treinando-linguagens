{"version":3,"names":["LinkPressable","children","style","onPress","onLongPress","onPressIn","onPressOut","to","accessibilityRole","rest","Platform","OS","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","DrawerItem","props","colors","useTheme","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","Color","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","borderRadius","StyleSheet","flatten","color","backgroundColor","iconNode","size","container","wrapper","selected","marginLeft","marginVertical","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  onPressIn,\n  onPressOut,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        // types for PressableProps and TextProps are incompatible with each other by `null` so we\n        // can't use {...rest} for these 3 props\n        onLongPress={onLongPress ?? undefined}\n        onPressIn={onPressIn ?? undefined}\n        onPressOut={onPressOut ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;AAiFA,MAAMA,aAAa,GAAG,QAgBhB;EAAA,IAhBiB;IACrBC,QADqB;IAErBC,KAFqB;IAGrBC,OAHqB;IAIrBC,WAJqB;IAKrBC,SALqB;IAMrBC,UANqB;IAOrBC,EAPqB;IAQrBC,iBARqB;IASrB,GAAGC;EATkB,CAgBjB;;EACJ,IAAIC,qBAAA,CAASC,EAAT,KAAgB,KAAhB,IAAyBJ,EAA7B,EAAiC;IAC/B;IACA;IACA,oBACE,oBAAC,YAAD,eACME,IADN;MAEE,EAAE,EAAEF,EAFN;MAGE,KAAK,EAAE,CAACK,MAAM,CAACC,MAAR,EAAgBX,KAAhB,CAHT;MAIE,OAAO,EAAGY,CAAD,IAAY;QACnB,IACE,EAAEA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACE,MAAf,IAAyBF,CAAC,CAACG,OAA3B,IAAsCH,CAAC,CAACI,QAA1C,OAAuD;QACtDJ,CAAC,CAACD,MAAF,IAAY,IAAZ,IAAoBC,CAAC,CAACD,MAAF,KAAa,CADlC,CADF,CAEuC;QAFvC,EAGE;UACAC,CAAC,CAACK,cAAF;UACAhB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAGW,CAAH,CAAP;QACD;MACF,CAZH,CAaE;MACA;MAdF;MAeE,WAAW,EAAEV,WAAF,aAAEA,WAAF,cAAEA,WAAF,GAAiBgB,SAf9B;MAgBE,SAAS,EAAEf,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAee,SAhB1B;MAiBE,UAAU,EAAEd,UAAF,aAAEA,UAAF,cAAEA,UAAF,GAAgBc;IAjB5B,IAmBGnB,QAnBH,CADF;EAuBD,CA1BD,MA0BO;IACL,oBACE,oBAAC,2BAAD,eACMQ,IADN;MAEE,iBAAiB,EAAED,iBAFrB;MAGE,OAAO,EAAEL;IAHX,iBAKE,oBAAC,iBAAD;MAAM,KAAK,EAAED;IAAb,GAAqBD,QAArB,CALF,CADF;EASD;AACF,CAtDD;AAwDA;AACA;AACA;;;AACe,SAASoB,UAAT,CAAoBC,KAApB,EAAkC;EAC/C,MAAM;IAAEC;EAAF,IAAa,IAAAC,gBAAA,GAAnB;EAEA,MAAM;IACJC,IADI;IAEJC,KAFI;IAGJC,UAHI;IAIJpB,EAJI;IAKJqB,OAAO,GAAG,KALN;IAMJC,gBANI;IAOJC,eAAe,GAAGP,MAAM,CAACQ,OAPrB;IAQJC,iBAAiB,GAAG,IAAAC,cAAA,EAAMV,MAAM,CAACW,IAAb,EAAmBC,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EARhB;IASJC,qBAAqB,GAAG,IAAAL,cAAA,EAAMH,eAAN,EAAuBK,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC,GAAyCC,MAAzC,EATpB;IAUJE,uBAAuB,GAAG,aAVtB;IAWJrC,KAXI;IAYJC,OAZI;IAaJqC,UAbI;IAcJC,YAdI;IAeJ,GAAGhC;EAfC,IAgBFa,KAhBJ;;EAkBA,MAAM;IAAEoB,YAAY,GAAG;EAAjB,IAAuBC,uBAAA,CAAWC,OAAX,CAAmB1C,KAAK,IAAI,EAA5B,CAA7B;;EACA,MAAM2C,KAAK,GAAGjB,OAAO,GAAGE,eAAH,GAAqBE,iBAA1C;EACA,MAAMc,eAAe,GAAGlB,OAAO,GAC3BU,qBAD2B,GAE3BC,uBAFJ;EAIA,MAAMQ,QAAQ,GAAGtB,IAAI,GAAGA,IAAI,CAAC;IAAEuB,IAAI,EAAE,EAAR;IAAYpB,OAAZ;IAAqBiB;EAArB,CAAD,CAAP,GAAwC,IAA7D;EAEA,oBACE,oBAAC,iBAAD;IACE,WAAW,EAAE;EADf,GAEMpC,IAFN;IAGE,KAAK,EAAE,CAACG,MAAM,CAACqC,SAAR,EAAmB;MAAEP,YAAF;MAAgBI;IAAhB,CAAnB,EAAsD5C,KAAtD;EAHT,iBAKE,oBAAC,aAAD;IACE,OAAO,EAAEC,OADX;IAEE,KAAK,EAAE,CAACS,MAAM,CAACsC,OAAR,EAAiB;MAAER;IAAF,CAAjB,CAFT;IAGE,iBAAiB,EAAC,QAHpB;IAIE,kBAAkB,EAAE;MAAES,QAAQ,EAAEvB;IAAZ,CAJtB;IAKE,UAAU,EAAEY,UALd;IAME,YAAY,EAAEC,YANhB;IAOE,EAAE,EAAElC;EAPN,gBASE,oBAAC,KAAD,CAAO,QAAP,QACGwC,QADH,eAEE,oBAAC,iBAAD;IACE,KAAK,EAAE,CACLnC,MAAM,CAACc,KADF,EAEL;MAAE0B,UAAU,EAAEL,QAAQ,GAAG,EAAH,GAAQ,CAA9B;MAAiCM,cAAc,EAAE;IAAjD,CAFK;EADT,GAMG,OAAO3B,KAAP,KAAiB,QAAjB,gBACC,oBAAC,iBAAD;IACE,aAAa,EAAE,CADjB;IAEE,gBAAgB,EAAEG,gBAFpB;IAGE,KAAK,EAAE,CACL;MACEgB,KADF;MAEES,UAAU,EAAE;IAFd,CADK,EAKL3B,UALK;EAHT,GAWGD,KAXH,CADD,GAeCA,KAAK,CAAC;IAAEmB,KAAF;IAASjB;EAAT,CAAD,CArBT,CAFF,CATF,CALF,CADF;AA6CD;;AAED,MAAMhB,MAAM,GAAG+B,uBAAA,CAAWY,MAAX,CAAkB;EAC/BN,SAAS,EAAE;IACTO,gBAAgB,EAAE,EADT;IAETH,cAAc,EAAE,CAFP;IAGTI,QAAQ,EAAE;EAHD,CADoB;EAM/BP,OAAO,EAAE;IACPQ,aAAa,EAAE,KADR;IAEPC,UAAU,EAAE,QAFL;IAGPC,OAAO,EAAE;EAHF,CANsB;EAW/BlC,KAAK,EAAE;IACLmC,WAAW,EAAE,EADR;IAELC,IAAI,EAAE;EAFD,CAXwB;EAe/BjD,MAAM,EAAE;IACNkD,OAAO,EAAE;EADH;AAfuB,CAAlB,CAAf"}