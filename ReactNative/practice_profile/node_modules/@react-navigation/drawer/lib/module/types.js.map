{"version":3,"names":[],"sources":["types.tsx"],"sourcesContent":["import type { HeaderOptions } from '@react-navigation/elements';\nimport type {\n  Descriptor,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  NavigationHelpers,\n  NavigationProp,\n  ParamListBase,\n  Route,\n  RouteProp,\n} from '@react-navigation/native';\nimport type { StyleProp, TextStyle, ViewStyle } from 'react-native';\nimport type {\n  PanGestureHandler,\n  PanGestureHandlerProperties,\n} from 'react-native-gesture-handler';\n\nexport type Scene = {\n  route: Route<string>;\n  focused: boolean;\n  color?: string;\n};\n\nexport type Layout = { width: number; height: number };\n\nexport type DrawerNavigationConfig = {\n  /**\n   * Function that returns React element to render as the content of the drawer, for example, navigation items.\n   * Defaults to `DrawerContent`.\n   */\n  drawerContent?: (props: DrawerContentComponentProps) => React.ReactNode;\n  /**\n   * Whether inactive screens should be detached from the view hierarchy to save memory.\n   * Make sure to call `enableScreens` from `react-native-screens` to make it work.\n   * Defaults to `true`.\n   */\n  detachInactiveScreens?: boolean;\n  /**\n   * Whether to use the legacy implementation based on Reanimated 1.\n   * The new implementation based on Reanimated 2 will perform better,\n   * but you need additional configuration and need to use Hermes with Flipper to debug.\n   *\n   * This defaults to `true` if Reanimated 2 is not configured.\n   *\n   * Otherwise, it defaults to `false`\n   */\n  useLegacyImplementation?: boolean;\n};\n\nexport type DrawerNavigationOptions = HeaderOptions & {\n  /**\n   * Title text for the screen.\n   */\n  title?: string;\n\n  /**\n   * Whether this screens should render the first time it's accessed. Defaults to `true`.\n   * Set it to `false` if you want to render the screen on initial render.\n   */\n  lazy?: boolean;\n\n  /**\n   * Function that returns a React Element to display as a header.\n   */\n  header?: (props: DrawerHeaderProps) => React.ReactNode;\n\n  /**\n   * Whether to show the header. Setting this to `false` hides the header.\n   * Defaults to `true`.\n   */\n  headerShown?: boolean;\n\n  /**\n   * Title string of a screen displayed in the drawer\n   * or a function that given { focused: boolean, color: string } returns a React.Node\n   * When undefined, scene title is used.\n   */\n  drawerLabel?:\n    | string\n    | ((props: { color: string; focused: boolean }) => React.ReactNode);\n\n  /**\n   * A function that given { focused: boolean, color: string } returns a React.Node to display an icon the drawer.\n   */\n  drawerIcon?: (props: {\n    color: string;\n    size: number;\n    focused: boolean;\n  }) => React.ReactNode;\n\n  /**\n   * Color for the icon and label in the active item in the drawer.\n   */\n  drawerActiveTintColor?: string;\n\n  /**\n   * Background color for the active item in the drawer.\n   */\n  drawerActiveBackgroundColor?: string;\n\n  /**\n   * Color for the icon and label in the inactive items in the drawer.\n   */\n  drawerInactiveTintColor?: string;\n\n  /**\n   * Background color for the inactive items in the drawer.\n   */\n  drawerInactiveBackgroundColor?: string;\n\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  drawerAllowFontScaling?: boolean;\n\n  /**\n   * Style object for the single item, which can contain an icon and/or a label.\n   */\n  drawerItemStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object to apply to the `Text` inside content section which renders a label.\n   */\n  drawerLabelStyle?: StyleProp<TextStyle>;\n\n  /**\n   * Style object for the content section.\n   */\n  drawerContentContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the wrapper view.\n   */\n  drawerContentStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the drawer component.\n   * You can pass a custom background color for a drawer or a custom width here.\n   */\n  drawerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Position of the drawer on the screen. Defaults to `left`.\n   */\n  drawerPosition?: 'left' | 'right';\n\n  /**\n   * Type of the drawer. It determines how the drawer looks and animates.\n   * - `front`: Traditional drawer which covers the screen with a overlay behind it.\n   * - `back`: The drawer is revealed behind the screen on swipe.\n   * - `slide`: Both the screen and the drawer slide on swipe to reveal the drawer.\n   * - `permanent`: A permanent drawer is shown as a sidebar.\n   *\n   * Defaults to `slide` on iOS and `front` on other platforms.\n   */\n  drawerType?: 'front' | 'back' | 'slide' | 'permanent';\n\n  /**\n   * Whether the statusbar should be hidden when the drawer is pulled or opens,\n   */\n  drawerHideStatusBarOnOpen?: boolean;\n\n  /**\n   * Animation of the statusbar when hiding it. use in combination with `drawerHideStatusBarOnOpen`.\n   */\n  drawerStatusBarAnimation?: 'slide' | 'none' | 'fade';\n\n  /**\n   * Color of the overlay to be displayed on top of the content view when drawer gets open.\n   * The opacity is animated from `0` to `1` when the drawer opens.\n   */\n  overlayColor?: string;\n\n  /**\n   * Style object for the component wrapping the screen content.\n   */\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Props to pass to the underlying pan gesture handler.\n   * Not supported on Web.\n   */\n  gestureHandlerProps?: PanGestureHandlerProperties;\n\n  /**\n   * Whether you can use swipe gestures to open or close the drawer.\n   * Defaults to `true`.\n   * Not supported on Web.\n   */\n  swipeEnabled?: boolean;\n\n  /**\n   * How far from the edge of the screen the swipe gesture should activate.\n   * Not supported on Web.\n   */\n  swipeEdgeWidth?: number;\n\n  /**\n   * Minimum swipe distance threshold that should activate opening the drawer.\n   */\n  swipeMinDistance?: number;\n\n  /**\n   * Whether the keyboard should be dismissed when the swipe gesture begins.\n   * Defaults to `'on-drag'`. Set to `'none'` to disable keyboard handling.\n   */\n  keyboardDismissMode?: 'on-drag' | 'none';\n\n  /**\n   * Whether this screen should be unmounted when navigating away from it.\n   * Defaults to `false`.\n   */\n  unmountOnBlur?: boolean;\n\n  /**\n   * Whether inactive screens should be suspended from re-rendering. Defaults to `false`.\n   * Defaults to `true` when `enableFreeze()` is run at the top of the application.\n   * Requires `react-native-screens` version >=3.16.0.\n   *\n   * Only supported on iOS and Android.\n   */\n  freezeOnBlur?: boolean;\n};\n\nexport type DrawerContentComponentProps = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nexport type DrawerHeaderProps = {\n  /**\n   * Layout of the screen.\n   */\n  layout: Layout;\n  /**\n   * Options for the current screen.\n   */\n  options: DrawerNavigationOptions;\n  /**\n   * Route object for the current screen.\n   */\n  route: RouteProp<ParamListBase>;\n  /**\n   * Navigation prop for the header.\n   */\n  navigation: DrawerNavigationProp<ParamListBase>;\n};\n\nexport type DrawerNavigationEventMap = {\n  /**\n   * Event which fires on tapping on the item in the drawer menu.\n   */\n  drawerItemPress: { data: undefined; canPreventDefault: true };\n};\n\nexport type DrawerNavigationHelpers = NavigationHelpers<\n  ParamListBase,\n  DrawerNavigationEventMap\n> &\n  DrawerActionHelpers<ParamListBase>;\n\nexport type DrawerNavigationProp<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = NavigationProp<\n  ParamList,\n  RouteName,\n  NavigatorID,\n  DrawerNavigationState<ParamList>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerActionHelpers<ParamList>;\n\nexport type DrawerScreenProps<\n  ParamList extends ParamListBase,\n  RouteName extends keyof ParamList = keyof ParamList,\n  NavigatorID extends string | undefined = undefined\n> = {\n  navigation: DrawerNavigationProp<ParamList, RouteName, NavigatorID>;\n  route: RouteProp<ParamList, RouteName>;\n};\n\nexport type DrawerDescriptor = Descriptor<\n  DrawerNavigationOptions,\n  DrawerNavigationProp<ParamListBase>,\n  RouteProp<ParamListBase>\n>;\n\nexport type DrawerDescriptorMap = Record<string, DrawerDescriptor>;\n\nexport type DrawerProps = {\n  dimensions: { width: number; height: number };\n  drawerPosition: 'left' | 'right';\n  drawerStyle?: StyleProp<ViewStyle>;\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  hideStatusBarOnOpen: boolean;\n  keyboardDismissMode: 'none' | 'on-drag';\n  onClose: () => void;\n  onOpen: () => void;\n  open: boolean;\n  overlayStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: () => React.ReactNode;\n  renderSceneContent: () => React.ReactNode;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  swipeDistanceThreshold: number;\n  swipeEdgeWidth: number;\n  swipeEnabled: boolean;\n  swipeVelocityThreshold: number;\n};\n"],"mappings":""}