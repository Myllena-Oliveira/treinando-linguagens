{"version":3,"names":["React","I18nManager","InteractionManager","Keyboard","Platform","StatusBar","StyleSheet","View","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","interactionHandle","undefined","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","props","width","flatten","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBarOnOpen","hideStatusBar","statusBarAnimation","isStatusBarHidden","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","getConstants","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.getConstants().isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.getConstants().isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"],"mappings":"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"}